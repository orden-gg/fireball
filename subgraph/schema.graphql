type Player @entity {
    "player address"
    id: ID!
    parcels: [Parcel!]! @derivedFrom(field: "owner")
    parcelsCount: Int!
    installations: [Installation!]! @derivedFrom(field: "owner")
    tiles: [Tile!]! @derivedFrom(field: "owner")
}

type Parcel @entity {
    "parcel token id"
    id: ID!
    parcelId: String
    parcelHash: String
    owner: Player
    district: Int
    size: Int
    coordinateX: Int
    coordinateY: Int

    lastChanneled: Int
    lastClaimed: Int

    fudBoost: BigInt
    fomoBoost: BigInt
    alphaBoost: BigInt
    kekBoost: BigInt

    "parcel current alchemica"
    alchemica: [BigInt!]!
    surveys: [Survey!] @derivedFrom(field: "parcel")

    installations: [Installation!]!
    tiles: [Tile!]!
}

type Survey @entity {
    id: ID!
    surveyed: Bytes! # address
    parcel: Parcel!
    round: Int!
    fud: BigInt!
    fomo: BigInt!
    alpha: BigInt!
    kek: BigInt!
}

type Installation @entity {
    id: ID!
    installationId: Int!
    equipped: Boolean!
    parcel: Parcel
    owner: Player!
    x: Int!
    y: Int!
}

type Tile @entity {
    id: ID!
    tileId: Int!
    equipped: Boolean!
    parcel: Parcel
    owner: Player!
    x: Int!
    y: Int!
}

type Gotchi @entity {
    id: ID!
    lastChanneled: Int!
}
