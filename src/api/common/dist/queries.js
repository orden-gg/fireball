"use strict";
exports.__esModule = true;
exports.portalQueryById = exports.portalsQueryByAddress = exports.parcelsOwnerGotchiverseQuery = exports.parcelsGotchiverseQuery = exports.gotchisGotchiverseQuery = exports.borrowedByAddressQuery = exports.lendingsByAddressQuery = exports.lendingsQuery = exports.raffleWinsQuery = exports.raffleEntrantsQuery = exports.raffleQuery = exports.listedParcelsQuery = exports.auctionQuery = exports.getParcelOrderDirectionQuery = exports.erc721SalesHistory = exports.activeListingQeury = exports.parcelQuery = exports.realmQueryByDistrict = exports.realmQuery = exports.erc1155ListingsBatchQuery = exports.erc1155Query = exports.svgQuery = exports.userOwnedGotchisQuery = exports.userQuery = exports.gotchiByIdQuery = exports.gotchiesQuery = void 0;
exports.gotchiesQuery = function (skip, orderDir, hauntId) {
    return "{\n        aavegotchis(\n          first: 1000,\n          skip: " + skip + ",\n          orderBy: id,\n          orderDirection: " + orderDir + ",\n          where: {status: 3, owner_not: \"0x0000000000000000000000000000000000000000\", hauntId: " + hauntId + "}\n        ) {\n          id\n          name\n          numericTraits\n          modifiedNumericTraits\n          withSetsNumericTraits\n          baseRarityScore\n          modifiedRarityScore\n          withSetsRarityScore\n          kinship\n          toNextLevel\n          level\n          experience\n          equippedWearables\n          collateral\n          hauntId\n          createdAt\n          possibleSets\n          equippedSetID\n          equippedSetName\n          usedSkillPoints\n          timesTraded\n          stakedAmount\n          listings(where:{cancelled: false, timePurchased: 0}) {\n            id\n            priceInWei\n          }\n          historicalPrices\n          owner {\n            id\n          }\n          originalOwner {\n            id\n          }\n          lending\n        }\n    }";
};
exports.gotchiByIdQuery = function (id) {
    return "{\n        aavegotchi(id: " + id + ") {\n            id\n            name\n            numericTraits\n            modifiedNumericTraits\n            withSetsNumericTraits\n            baseRarityScore\n            modifiedRarityScore\n            withSetsRarityScore\n            kinship\n            toNextLevel\n            level\n            experience\n            equippedWearables\n            collateral\n            hauntId\n            createdAt\n            possibleSets\n            equippedSetID\n            equippedSetName\n            usedSkillPoints\n            minimumStake\n            stakedAmount\n            timesTraded\n            originalOwner\n            listings(where:{cancelled: false, timePurchased: 0}) {\n                id\n                priceInWei\n            }\n            historicalPrices\n            owner {\n                id\n            }\n            originalOwner {\n                id\n            }\n            lending\n        }\n    }";
};
exports.userQuery = function (id, skip) {
    return "{\n    user(id: \"" + id + "\") {\n      id\n      gotchisOriginalOwned(\n        first: 1000\n        skip: " + skip + "\n        where: {\n          status: 3\n        }\n      ) {\n        id\n        name\n        numericTraits\n        modifiedNumericTraits\n        withSetsNumericTraits\n        baseRarityScore\n        modifiedRarityScore\n        withSetsRarityScore\n        kinship\n        equippedWearables\n        experience\n        level\n        toNextLevel\n        collateral\n        hauntId\n        createdAt\n        possibleSets\n        equippedSetID\n        equippedSetName\n        usedSkillPoints\n        timesTraded\n        stakedAmount\n        listings(\n          where: {\n            cancelled: false\n            timePurchased: 0\n          }\n        ) {\n          id\n          priceInWei\n        }\n        historicalPrices\n        owner {\n          id\n        }\n        lending\n      }\n    }\n  }";
};
exports.userOwnedGotchisQuery = function (address, skip) {
    return "{\n    user(id: \"" + address + "\") {\n      id\n      gotchisOwned(\n        first: 1000\n        skip: " + skip + "\n        where: {\n          status: 3\n          originalOwner: null\n        }\n      ) {\n        id\n        name\n        numericTraits\n        modifiedNumericTraits\n        withSetsNumericTraits\n        baseRarityScore\n        modifiedRarityScore\n        withSetsRarityScore\n        kinship\n        equippedWearables\n        experience\n        level\n        toNextLevel\n        collateral\n        hauntId\n        createdAt\n        possibleSets\n        equippedSetID\n        equippedSetName\n        usedSkillPoints\n        timesTraded\n        stakedAmount\n        listings(\n          where: {\n            cancelled: false\n            timePurchased: 0\n          }\n        ) {\n          id\n          priceInWei\n        }\n        historicalPrices\n        owner {\n          id\n        }\n        lending\n      }\n    }\n  }";
};
exports.svgQuery = function (id) {
    return "{\n        aavegotchis(where: {id: " + id + "}) {\n          id\n          svg\n          right\n          back\n          left\n        }\n      }";
};
exports.erc1155Query = function (id, sold, category, orderBy, orderDireciton) {
    return "{\n      erc1155Listings (\n          first: 1,\n          orderBy: " + orderBy + ",\n          orderDirection: " + orderDireciton + ",\n          where: {\n              cancelled: false,\n              sold: " + sold + ",\n              category: " + category + ",\n              erc1155TypeId: " + id + "\n          }\n      ){\n          id\n          priceInWei\n          timeLastPurchased\n      }\n  }";
};
exports.erc1155ListingsBatchQuery = function (id, category, isSold, orderBy, orderDireciton) {
    return "\n        item" + id + ": erc1155Listings(\n            orderBy: " + orderBy + ",\n            orderDirection: " + orderDireciton + ",\n            where: {\n                erc1155TypeId: " + id + ",\n                category: " + category + "\n                sold: " + isSold + ",\n                cancelled: false\n            }\n        ) {\n            id\n            priceInWei\n            timeLastPurchased\n        }\n    ";
};
exports.realmQuery = function (address, skip) {
    return "{\n    parcels(\n      first: 1000,\n      skip: " + skip + "\n      where: {\n        owner: \"" + address + "\"\n      }\n    ) {\n      id\n      parcelId\n      coordinateX\n      coordinateY\n      size\n      district\n      parcelHash\n      lastChanneled\n      lastClaimed\n      fudBoost\n      fomoBoost\n      alphaBoost\n      kekBoost\n      alchemica\n      surveys {\n        id\n        surveyed\n        round\n        fud\n        fomo\n        alpha\n        kek\n      }\n      installations(first: 1000) {\n        installationId\n      }\n      tiles(first: 1000) {\n        tileId\n      }\n      owner {\n        id\n      }\n    }\n  }";
};
exports.realmQueryByDistrict = function (skip, district) {
    return "{\n      parcels(first: 1000, skip: " + skip + ", where: { district: " + district + "}) {\n        tokenId\n        parcelId\n        owner {\n          id\n        }\n        coordinateX\n        coordinateY\n        size\n        district\n        parcelHash\n        fudBoost\n        fomoBoost\n        alphaBoost\n        kekBoost\n        timesTraded\n        historicalPrices\n        activeListing\n        auctionId\n      }\n    }";
};
exports.parcelQuery = function (id) {
    return "{\n      parcel(id: " + id + ") {\n        id\n        parcelId\n        owner {\n          id\n        }\n        coordinateX\n        coordinateY\n        size\n        district\n        parcelHash\n        lastChanneled\n        lastClaimed\n        fudBoost\n        fomoBoost\n        alphaBoost\n        kekBoost\n        alchemica\n        surveys {\n            id\n            surveyed\n            parcel\n            round\n            fud\n            fomo\n            alpha\n            kek\n        }\n        installations {\n            id\n            installationId\n            x\n            y\n        }\n        tiles {\n            id\n            tileId\n            x\n            y\n        }\n      }\n    }";
};
exports.activeListingQeury = function (erc, id, type, category) {
    return "{\n        " + erc + "Listings(\n                where: {\n                    category: \"" + category + "\"\n                    " + type + ": \"" + id + "\"\n                    cancelled: false\n                    timePurchased: 0\n                }\n            ) {\n                id\n                priceInWei\n            }\n        }";
};
exports.erc721SalesHistory = function (id, category) {
    return "{\n        erc721Listings(\n            where:{\n                tokenId_in: [\"" + id + "\"]\n                category: \"" + category + "\"\n                timePurchased_not: 0\n            },\n            orderBy: timePurchased,\n            orderDirection: desc,\n        ) {\n            buyer\n            seller\n            timePurchased\n            priceInWei\n            equippedWearables\n        }\n    }";
};
exports.getParcelOrderDirectionQuery = function (data) {
    return "{\n        erc721Listings(\n            first: 1,\n            orderBy: priceInWei,\n            orderDirection: " + data.direction + ",\n            where: {\n                size: \"" + data.size + "\",\n                category: \"4\",\n                cancelled: false,\n                timePurchased: 0,\n            }\n        ){\n            id\n            priceInWei\n            size\n        }\n    }";
};
exports.auctionQuery = function (id) {
    return "{\n      auctions(first: 1, where: { id: \"" + id + "\" }) {\n        id\n        highestBid\n      }\n    }";
};
exports.listedParcelsQuery = function (skip, orderDir, size) {
    return "{\n        erc721Listings(\n            first: 1000,\n            skip: " + skip + ",\n            orderDirection: " + orderDir + ",\n            orderBy: timeCreated,\n            where: {\n                category: \"4\",\n                size: " + size + ",\n                priceInWei_lt: \"10000000000000000000000000\",\n                timePurchased: 0,\n                cancelled: false\n            }\n        ) {\n            id\n            tokenId\n            category\n            priceInWei\n            seller\n            timePurchased\n            timeCreated\n            cancelled\n            erc721TokenAddress\n            blockCreated\n            parcel {\n                id\n                tokenId\n                parcelId\n                parcelHash\n                owner {\n                    id\n                }\n                district\n                fudBoost\n                fomoBoost\n                alphaBoost\n                kekBoost\n                size\n                timesTraded\n                historicalPrices\n                coordinateX\n                coordinateY\n            }\n        }\n    }";
};
exports.raffleQuery = function (id) {
    return "{\n    raffles(where: {id: \"" + id + "\" }) {\n      ticketPools {\n        id\n        prizes{\n          id\n          quantity\n        }\n      }\n      stats {\n        totalCommon\n        totalUncommon\n        totalRare\n        totalLegendary\n        totalMythical\n        totalGodLike\n        totalDrop\n      }\n    }\n  }";
};
exports.raffleEntrantsQuery = function (address) {
    return "{\n      raffleEntrants(where: { address: \"" + address + "\" }) {\n        id\n        ticketId\n        quantity\n        raffle {\n          id\n        }\n      }\n    }";
};
exports.raffleWinsQuery = function (address) {
    return "{\n      raffleWinners(where: { address: \"" + address + "\" }) {\n        id\n        item{\n          id\n        }\n        raffle {\n          id\n        }\n        quantity\n      }\n    }";
};
exports.lendingsQuery = function (skip, orderDir) {
    return "{\n      gotchiLendings(\n          first: 1000,\n          skip: " + skip + ",\n          orderBy: \"timeCreated\",\n          orderDirection: " + orderDir + ",\n          where: {\n            cancelled: false\n            timeAgreed: null\n        }\n      ) {\n        id\n        timeCreated\n        rentDuration\n        upfrontCost\n        period\n        gotchi {\n            id\n            name\n            collateral\n            kinship\n            hauntId\n            baseRarityScore\n            modifiedRarityScore,\n            toNextLevel\n            level\n            equippedWearables\n            numericTraits\n            modifiedNumericTraits\n            originalOwner {\n                id\n            }\n            timesTraded\n            stakedAmount\n        }\n        lender\n        borrower\n        whitelistId\n        tokensToShare\n        splitOther\n        splitBorrower\n        splitOwner\n      }\n    }";
};
exports.lendingsByAddressQuery = function (address, skip) {
    return "{\n    gotchiLendings(\n      first: 1000,\n      skip: " + skip + ",\n      where:{\n        lender: \"" + address + "\",\n        borrower_not: \"0x0000000000000000000000000000000000000000\",\n        cancelled: false,\n        completed: false\n      }\n    ) {\n      id\n      timeCreated\n      timeAgreed\n      rentDuration\n      upfrontCost\n      period\n      lastClaimed\n      completed\n      gotchi {\n        id\n        name\n        collateral\n        kinship\n        hauntId\n        baseRarityScore\n        modifiedRarityScore\n        numericTraits\n        modifiedNumericTraits\n        withSetsNumericTraits\n        withSetsRarityScore\n        equippedWearables\n        possibleSets\n        equippedSetID\n        equippedSetName\n        toNextLevel\n        level\n        timesTraded\n        stakedAmount\n        originalOwner {\n          id\n        }\n      }\n      lender\n      borrower\n      whitelistId\n      tokensToShare\n      splitOther\n      splitBorrower\n      splitOwner\n    }\n  }";
};
exports.borrowedByAddressQuery = function (address, skip) {
    return "{\n    gotchiLendings(\n      first: 1000,\n      skip: " + skip + ",\n      where:{\n        borrower: \"" + address + "\",\n        cancelled: false,\n        completed: false\n      }\n    ) {\n      id\n      timeCreated\n      timeAgreed\n      rentDuration\n      upfrontCost\n      period\n      lastClaimed\n      completed\n      gotchi {\n        id\n        name\n        collateral\n        kinship\n        hauntId\n        baseRarityScore\n        modifiedRarityScore\n        numericTraits\n        modifiedNumericTraits\n        withSetsNumericTraits\n        withSetsRarityScore\n        equippedWearables\n        possibleSets\n        equippedSetID\n        equippedSetName\n        toNextLevel\n        level\n        timesTraded\n        stakedAmount\n        originalOwner {\n          id\n        }\n      }\n      lender\n      borrower\n      whitelistId\n      tokensToShare\n      splitOther\n      splitBorrower\n      splitOwner\n    }\n  }";
};
// ! Gotchiverse queries
exports.gotchisGotchiverseQuery = function (gotchis) {
    return "{\n        gotchis(\n            first: " + gotchis.length + ",\n            where: { id_in: " + JSON.stringify(gotchis) + "\n        })  {\n          id\n          lastChanneledAlchemica\n        }\n      }";
};
exports.parcelsGotchiverseQuery = function (parcels) {
    return "{\n        parcels(\n            first: " + parcels.length + ",\n            where: { id_in: " + JSON.stringify(parcels) + "\n        }) {\n          id\n          lastChanneledAlchemica\n          equippedInstallations {\n            id\n            alchemicaType\n            upgradeQueueBoost\n            deprecated\n          }\n        }\n      }";
};
exports.parcelsOwnerGotchiverseQuery = function (owner) {
    return "{\n        parcels(\n            first: 1000,\n            where: { owner: \"" + owner + "\" }\n        ) {\n          id\n          lastChanneledAlchemica\n          equippedInstallations {\n            id\n            alchemicaType\n            upgradeQueueBoost\n            deprecated\n          }\n        }\n      }";
};
exports.portalsQueryByAddress = function (owner) {
    return "{\n        portals(\n            where: { owner: \"" + owner + "\" }\n        ) {\n          hauntId\n          openedAt\n          historicalPrices\n          id\n        }\n      }";
};
exports.portalQueryById = function (id) {
    return "{\n        portal(id: " + id + ") {\n          hauntId\n          historicalPrices\n          id\n          boughtAt\n          timesTraded\n          activeListing\n          openedAt\n          gotchi {\n            id\n            name\n          }\n          owner {\n            id\n          }\n        }\n      }";
};
